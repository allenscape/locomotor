// generated by Fast Light User Interface Designer (fluid) version 1.0109

#ifndef EvolverUI_hpp
#define EvolverUI_hpp
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Tile.H>
#include <FL/Fl_Group.H>
#include <SimulationWindow.hpp>
#include <PhysicsSimulator.hpp>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Pack.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Value_Input.H>
#include <cstdlib>
#include <ctime>
#include <FL/Fl_Button.H>
#include <FL/Fl_Output.H>
#include <FitnessGraph.hpp>
#include <FitnessFuncFactory.hpp>
#include <FL/Fl_Choice.H>
#include <EvolverFactory.hpp>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Text_Buffer.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Progress.H>
#include <GLTools.h>
#include <FL/Fl_Return_Button.H>
#include <Evolver.hpp>
#include <FL/Fl_File_Chooser.H>
#include <FL/fl_ask.H>
#include <NeatEvolver.hpp>

class EvolverUI {
public:
  NEAT* myNeat; 
  Else::PhysicsSimulatorPtr mySim; 
  Else::EvolverPtr myEvolver; 
  Else::FitnessFuncPtr myFitnessFunc; 
private:
  Fl_Text_Buffer* myFitnessInstructionBuffer; 
public:
  EvolverUI();
  Fl_Double_Window *myWindow;
private:
  Fl_Menu_Bar *myMenuBar;
  static Fl_Menu_Item menu_myMenuBar[];
  static Fl_Menu_Item *myFileMenu;
  void cb_Load_i(Fl_Menu_*, void*);
  static void cb_Load(Fl_Menu_*, void*);
  void cb_Reset_i(Fl_Menu_*, void*);
  static void cb_Reset(Fl_Menu_*, void*);
public:
  Else::SimulationWindow *mySimWindow;
  Fl_Roller *myCameraElevationSlider;
private:
  void cb_myCameraElevationSlider_i(Fl_Roller*, void*);
  static void cb_myCameraElevationSlider(Fl_Roller*, void*);
public:
  Fl_Roller *myCameraRotationSlider;
private:
  void cb_myCameraRotationSlider_i(Fl_Roller*, void*);
  static void cb_myCameraRotationSlider(Fl_Roller*, void*);
  Fl_Group *myNeatParamsGroup;
public:
  Fl_Value_Input *myNumRuns;
private:
  void cb_myNumRuns_i(Fl_Value_Input*, void*);
  static void cb_myNumRuns(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *myGenLimit;
  Fl_Value_Input *myPopSize;
private:
  void cb_myPopSize_i(Fl_Value_Input*, void*);
  static void cb_myPopSize(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *myStepCount;
  Fl_Value_Input *myRandSeed;
private:
  void cb_myRandSeed_i(Fl_Value_Input*, void*);
  static void cb_myRandSeed(Fl_Value_Input*, void*);
  void cb_Set_i(Fl_Button*, void*);
  static void cb_Set(Fl_Button*, void*);
public:
  Fl_Output *myGenotypeFilename;
  Else::FitnessGraph *myFitnessGraph;
  Fl_Button *myRunStraightSim;
private:
  void cb_myRunStraightSim_i(Fl_Button*, void*);
  static void cb_myRunStraightSim(Fl_Button*, void*);
public:
  Fl_Choice *myControllerChoice;
private:
  void cb_myControllerChoice_i(Fl_Choice*, void*);
  static void cb_myControllerChoice(Fl_Choice*, void*);
  static Fl_Menu_Item menu_myControllerChoice[];
public:
  Fl_Light_Button *mySingleRunHasHarness;
  Fl_Value_Input *myDropOffAge;
private:
  void cb_myDropOffAge_i(Fl_Value_Input*, void*);
  static void cb_myDropOffAge(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *myMutationWeight;
private:
  void cb_myMutationWeight_i(Fl_Value_Input*, void*);
  static void cb_myMutationWeight(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *mySpeciesTarget;
private:
  void cb_mySpeciesTarget_i(Fl_Value_Input*, void*);
  static void cb_mySpeciesTarget(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *myLinkWeightMutationProb;
private:
  void cb_myLinkWeightMutationProb_i(Fl_Value_Input*, void*);
  static void cb_myLinkWeightMutationProb(Fl_Value_Input*, void*);
public:
  Fl_Group *myPhysicsGroup;
  Fl_Value_Input *myGravity;
  Fl_Value_Input *myCFM;
  Fl_Value_Input *myERP;
  Fl_Check_Button *myFastStepToggle;
private:
  void cb_Apply_i(Fl_Button*, void*);
  static void cb_Apply(Fl_Button*, void*);
public:
  Fl_Value_Input *myTimeStep;
  Fl_Value_Input *myDisplayRate;
private:
  void cb_myDisplayRate_i(Fl_Value_Input*, void*);
  static void cb_myDisplayRate(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *myUpdateRate;
private:
  void cb_myUpdateRate_i(Fl_Value_Input*, void*);
  static void cb_myUpdateRate(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *myFastSubSteps;
  Fl_Check_Button *myInternalCollisions;
private:
  void cb_myInternalCollisions_i(Fl_Check_Button*, void*);
  static void cb_myInternalCollisions(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *myCollisionERP;
  Fl_Value_Input *myCollisionCFM;
  Fl_Group *myFitnessFunctionGroup;
  Fl_Choice *myFitnessFuncChoice;
  static Fl_Menu_Item menu_myFitnessFuncChoice[];
private:
  void cb_Walk_i(Fl_Menu_*, void*);
  static void cb_Walk(Fl_Menu_*, void*);
  void cb_Balance_i(Fl_Menu_*, void*);
  static void cb_Balance(Fl_Menu_*, void*);
  void cb_Constant_i(Fl_Menu_*, void*);
  static void cb_Constant(Fl_Menu_*, void*);
  void cb_Velocity_i(Fl_Menu_*, void*);
  static void cb_Velocity(Fl_Menu_*, void*);
  void cb_Apply1_i(Fl_Button*, void*);
  static void cb_Apply1(Fl_Button*, void*);
public:
  Fl_Value_Input *myFitnessParamValue;
  Fl_Input *myFitnessParamName;
private:
  void cb_Apply2_i(Fl_Button*, void*);
  static void cb_Apply2(Fl_Button*, void*);
public:
  Fl_Text_Display *myFitnessInstructions;
  Fl_Group *myBodyParamsGroup;
  Fl_Value_Input *myBodyHeight;
  Fl_Value_Input *myBodyWeight;
private:
  void cb_Create_i(Fl_Button*, void*);
  static void cb_Create(Fl_Button*, void*);
public:
  Fl_Value_Slider *myOverrideActuator1;
private:
  void cb_myOverrideActuator1_i(Fl_Value_Slider*, void*);
  static void cb_myOverrideActuator1(Fl_Value_Slider*, void*);
public:
  Fl_Value_Input *myOverrideActuator1ID;
private:
  void cb_myOverrideActuator1ID_i(Fl_Value_Input*, void*);
  static void cb_myOverrideActuator1ID(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *myOverrideActuator1IsOn;
private:
  void cb_myOverrideActuator1IsOn_i(Fl_Check_Button*, void*);
  static void cb_myOverrideActuator1IsOn(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *myForceScale;
private:
  void cb_myForceScale_i(Fl_Value_Input*, void*);
  static void cb_myForceScale(Fl_Value_Input*, void*);
public:
  Fl_Light_Button *myHasController;
private:
  void cb_myHasController_i(Fl_Light_Button*, void*);
  static void cb_myHasController(Fl_Light_Button*, void*);
public:
  Fl_Progress *myLeftActuatorOutput1;
  Fl_Progress *myLeftActuatorOutput2;
  Fl_Progress *myLeftActuatorOutput3;
  Fl_Progress *myRightActuatorOutput1;
  Fl_Progress *myRightActuatorOutput2;
  Fl_Progress *myRightActuatorOutput3;
  Fl_Group *Images;
  Fl_Light_Button *myAnimSaving;
private:
  void cb_myAnimSaving_i(Fl_Light_Button*, void*);
  static void cb_myAnimSaving(Fl_Light_Button*, void*);
public:
  Fl_Input *myAnimName;
  Fl_Check_Button *myPreviewToggle;
  Fl_Choice *myCameraAngleChoice;
  static Fl_Menu_Item menu_myCameraAngleChoice[];
  Fl_Input *myStillName;
private:
  void cb_Take_i(Fl_Button*, void*);
  static void cb_Take(Fl_Button*, void*);
public:
  Fl_Light_Button *myShowSim;
private:
  void cb_myShowSim_i(Fl_Light_Button*, void*);
  static void cb_myShowSim(Fl_Light_Button*, void*);
  void cb_Start_i(Fl_Return_Button*, void*);
  static void cb_Start(Fl_Return_Button*, void*);
public:
  void show( int argc, char* argv[] );
  void updateParams();
  void showActuators( const std::vector<double>& argActuators );
  void setActuator( Fl_Progress* argProg, double argValue, int argId );
private:
  char myActuatorLabel[255][255]; 
};
#endif
